{   "scopeName": "source.tlaplus.pluscal",
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "PlusCal",
    "patterns": [
		{
			"include": "#define_blocks"
		},
        {
            "include": "#keywords"
        },
        {
            "include": "#tlaplus_keywords"
		},
        {
            "include": "#tlaplus_keywords"
		},
        {
            "include": "#embedded_operators"
        },
        {
            "include": "#labels"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#line_comments"
        },
        {
            "include": "#block_comments"
        },
        {
            "include": "#constants"
		},
        {
            "include": "#numeric_constants"
        },
		{
			"include": "#operators"
		},
		{
			"include": "#inst_module_refs"
		}
    ],
    "repository": {
        "keywords": {
            "name": "keyword.other",
            "match": "\\b(?:if|then|elsif|else|while|variable(s)?|define|process|macro|begin|end|do|skip|assert|procedure|return|call|fair|either|or|with|await|when|self|goto|print)\\b"
        },
        "tlaplus_keywords": {
            "name": "keyword.other.tlaplus",
            "match": "\\b(?:EXTENDS|VARIABLE(S)?|LET|IN|EXCEPT|ENABLED|UNCHANGED|LAMBDA|DOMAIN|CONSTANT(S)?|CHOOSE|LOCAL|ASSUME|ASSUMPTION|AXIOM|RECURSIVE|INSTANCE|WITH|THEOREM|SUBSET|UNION|SF_|WF_|USE|DEFS|BY|DEF|SUFFICES|PROVE|OBVIOUS|NEW|QED|RECURSIVE|PICK|HIDE|DEFINE|WITNESS|HAVE|TAKE|PROOF|ACTION|COROLLARY|LEMMA|OMITTED|ONLY|PROPOSITION|STATE|TEMPORAL)\\b"
        },
        "tlaplus_control_keywords": {
            "name": "keyword.control.tlaplus",
            "match": "\\b(?:IF|THEN|ELSE|CASE|OTHER)\\b"
        },
        "embedded_operators": {
            "match": "\\\\[a-zA-Z]+\\b",
            "name": "keyword.operator.tlaplus"
        },
        "strings": {
            "name": "string.quoted.double.tlaplus",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.tlaplus",
                    "match": "\\\\."
                }
            ]
        },
        "line_comments": {
            "match": "\\\\\\*.*$",
            "name": "comment.line"
        },
        "block_comments": {
            "name": "comment.block",
            "begin": "\\(\\*",
            "end": "\\*\\)"
        },
        "constants": {
            "name": "support.constant.tlaplus",
            "match": "\\b(?:TRUE|FALSE)\\b"
        },
        "numeric_constants": {
            "name": "support.constant.tlaplus",
            "match": "(?:\\b\\d+|\\\\(?:b|B)[01]+|\\\\(?:o|O)[0-7]+|\\\\(?:h|H)[0-9a-fA-F]+)\\b"
        },
        "labels": {
            "match": "^\\s*(\\w+:)[^=]",
            "captures": {
                "1": {
                    "name": "support.type.primitive"
                }
            }
		},
		"define_blocks": {
            "begin": "^\\s*(define)\\s*$",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other"
                }
            },
            "end": "^\\s*(end\\s+define);?\\s*$",
            "endCaptures": {
                "1": {
                    "name": "keyword.other"
                }
            },
            "patterns": [{
                "include": "source.tlaplus"
            }]
		},
		"operators": {
            "match": "(\\w+)\\s*\\((?!\\*)",
            "captures": {
                "1": {
                    "name": "entity.name.function"
                }
            }
        },
        "inst_module_refs": {
            "match": "\\b(\\w+!)(?=\\w)",
            "name": "entity.name.class"
        }
    }
}
